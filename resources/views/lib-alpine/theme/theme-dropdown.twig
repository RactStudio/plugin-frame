<div x-data="themeModeToggle()" pf-data="themeModeToggle">
    <!-- Dropdown -->
    <div class="pf-relative pf-text-left pf-flex pf-justify-center pf-items-center">
        <!-- Dropdown Trigger -->
        <button 
            id="pfThemeDropdownButton" 
            aria-expanded="false" 
            class="pf-flex pf-items-center pf-w-15 md:pf-w-28 pf-gap-1 pf-px-2 pf-py-2 pf-font-sans pf-text-center pf-bg-opacity-50 pf-bg-gray-300 pf-rounded-md pf-shadow-md pf-color:pf-text-white pf-color:hover:pf-text-gray-800 pf-text-gray-800 hover:pf-bg-gray-300 pf-dark:pf-text-gray-200 pf-dark:pf-bg-gray-700 pf-dark:hover:pf-bg-gray-600 pf-overflow-hidden pf-text-ellipsis"
            type="button"
            @click="toggleDropdown"
        >
            <!-- Selected Mode Icon -->
            <span id="selectedModeIcon" class="pf-h-6 pf-w-6" x-html="selectedIcon"></span>
            <!-- Selected Mode Text -->
            <span id="selectedModeText" class="pf-hidden md:pf-inline" x-text="currentMode.charAt(0).toUpperCase() + currentMode.slice(1)">Theme</span>
        </button>

        <!-- Dropdown Menu -->
        <div 
            id="pfThemeDropdown" 
            class="pf-items-center pf-z-10 pf-w-28 pf-mr-[70px] md:pf-mr-0 pf-bg-white pf-rounded-md pf-shadow-lg pf-border pf-border-gray-200 pf-dark:pf-bg-gray-800 pf-dark:pf-border-gray-600 pf-absolute pf-top-full pf-mt-1 pf-transform pf-transition-all pf-duration-600 pf-ease-in"
            :class="{'pf-hidden': !dropdownOpened, 'pf-opacity-100 pf-scale-100': dropdownOpened}"
            x-init="initLucidIcons()" <!-- Initialize Lucid icons when dropdown is opened -->
            @click.away="dropdownOpened = false" <!-- Close dropdown when clicking outside -->
        >
            <ul class="pf-py-1" aria-labelledby="pfThemeDropdownButton">
                <li>
                    <!-- Color Mode Button -->
                    <button 
                        id="colorModeButton"
                        type="button" 
                        class="pf-flex pf-items-center pf-w-full pf-gap-1 pf-px-2 pf-py-2 pf-font-sans pf-text-gray-700 hover:pf-bg-gray-200 pf-dark:pf-text-gray-200 pf-dark:hover:pf-bg-gray-600"
                        @click="selectOption('color')"
                    >
                        <i data-lucide="palette" class="pf-h-6 pf-w-6"></i>
                        Color
                    </button>
                </li>
                <li>
                    <!-- Light Mode Button -->
                    <button 
                        id="lightModeButton"
                        type="button" 
                        class="pf-flex pf-items-center pf-w-full pf-gap-1 pf-px-2 pf-py-2 pf-font-sans pf-text-gray-700 hover:pf-bg-gray-200 pf-dark:pf-text-gray-200 pf-dark:hover:pf-bg-gray-600"
                        @click="selectOption('light')"
                    >
                        <i data-lucide="sun" class="pf-h-6 pf-w-6"></i>
                        Light
                    </button>
                </li>
                <li>
                    <!-- Dark Mode Button -->
                    <button 
                        id="darkModeButton"
                        type="button" 
                        class="pf-flex pf-items-center pf-w-full pf-gap-1 pf-px-2 pf-py-2 pf-font-sans pf-text-gray-700 hover:pf-bg-gray-200 pf-dark:pf-text-gray-200 pf-dark:hover:pf-bg-gray-600"
                        @click="selectOption('dark')"
                    >
                        <i data-lucide="moon" class="pf-h-6 pf-w-6"></i>
                        Dark
                    </button>
                </li>
                <li>
                    <!-- System Mode Button -->
                    <button 
                        id="systemModeButton"
                        type="button" 
                        class="pf-flex pf-items-center pf-w-full pf-gap-1 pf-px-2 pf-py-2 pf-font-sans pf-text-gray-700 hover:pf-bg-gray-200 pf-dark:pf-text-gray-200 pf-dark:hover:pf-bg-gray-600"
                        @click="selectOption('system')"
                    >
                        <i data-lucide="sun-moon" class="pf-h-6 pf-w-6"></i>
                        System
                    </button>
                </li>
            </ul>
        </div>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('themeModeToggle', () => ({
            currentMode: localStorage.getItem('plugin_frame_theme') || 'system',
            dropdownOpened: false,

            // Icons for each mode
            icons: {
                color: `<i data-lucide="palette" class="pf-h-6 pf-w-6"></i>`,
                light: `<i data-lucide="sun" class="pf-h-6 pf-w-6"></i>`,
                dark: `<i data-lucide="moon" class="pf-h-6 pf-w-6"></i>`,
                system: `<i data-lucide="sun-moon" class="pf-h-6 pf-w-6"></i>`,
            },

            // Computed property to get the selected icon
            get selectedIcon() {
                return this.icons[this.currentMode];
            },

            init() {
                this.toggleMode(this.currentMode);
                this.$watch('currentMode', (value) => {
                    localStorage.setItem('plugin_frame_theme', value);
                    this.toggleMode(value);
                });
            },

            toggleDropdown() {
                this.dropdownOpened = !this.dropdownOpened;
            },

            selectOption(mode) {
                this.currentMode = mode;
                this.toggleDropdown();
            },

            toggleMode(mode) {
                const htmlElement = document.documentElement;

                // Apply the selected mode via theme-mode attribute
                htmlElement.setAttribute('theme-mode', 'pf-' + mode);

                if (mode === 'system') {
                    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                        htmlElement.setAttribute('theme-mode', 'pf-dark');
                    } else {
                        htmlElement.setAttribute('theme-mode', 'pf-light');
                    }
                }
            },

            // Initialize Lucid icons
            initLucidIcons() {
                if (window.lucide && window.lucide.createIcons) {
                    window.lucide.createIcons();
                }
            }
        }));
    });
</script>